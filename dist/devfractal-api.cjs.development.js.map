{"version":3,"file":"devfractal-api.cjs.development.js","sources":["../src/http.ts","../src/query.ts","../src/rest.ts"],"sourcesContent":["import ax, { AxiosInstance, AxiosRequestConfig } from 'axios'\nimport { decode } from 'io-ts-promise'\nimport { stringify } from 'query-string'\nimport {\n  array,\n  chop,\n  debug,\n  InputOf,\n  keys,\n  Mixed,\n  ObjC,\n  Props,\n  string,\n  TypeOf,\n  verify,\n} from 'technoidentity-utils'\n\nexport interface MethodArgs {\n  readonly resource?: string\n  readonly path?: string | readonly string[]\n  readonly query?: string | Record<string, any>\n}\n\nfunction slashWarn(s: string): void {\n  verify(string.is(s))\n\n  debug(!s.includes('/'), `${s} should not contain \"/\"`)\n}\nexport interface RequestConfig extends AxiosRequestConfig {\n  readonly baseURL: string\n}\n\nfunction buildResource(resource?: string): string {\n  if (resource !== undefined && resource.trim() !== '') {\n    slashWarn(resource)\n    return `/${resource}`\n  }\n\n  return ''\n}\n\nfunction buildPath(path?: string | readonly string[]): string {\n  if (array(string).is(path)) {\n    const paths: string[] = path.filter(p => p.trim() !== '')\n    paths.forEach(slashWarn)\n    return paths.length === 0 ? '' : `/${paths.join('/')}`\n  }\n\n  if (string.is(path) && path.trim() !== '') {\n    slashWarn(path)\n    return `/${path}`\n  }\n\n  return ''\n}\n\nfunction buildQueryString(query?: string | Record<string, any>): string {\n  return query === undefined || keys(query).length === 0\n    ? ''\n    : `?${string.is(query) ? query : stringify(query)}`\n}\n\nexport function buildUrl(options: MethodArgs): string {\n  return `${buildResource(options.resource)}${buildPath(\n    options.path,\n  )}${buildQueryString(options.query)}`\n}\n\nfunction url(options: MethodArgs | string): string {\n  return string.is(options) ? options : buildUrl(options)\n}\n\n// tslint:disable-next-line: typedef\nexport function http({ baseURL, ...config }: RequestConfig) {\n  const axios: AxiosInstance = ax.create({\n    ...config,\n    baseURL: chop(baseURL),\n  })\n\n  async function get<Spec extends Mixed>(\n    options: MethodArgs | string,\n    responseSpec: Spec,\n  ): Promise<TypeOf<Spec>> {\n    return axios\n      .get<InputOf<Spec>>(url(options))\n      .then(res => res.data)\n      .then(decode(responseSpec))\n  }\n\n  async function post<Spec extends Mixed, ID extends keyof Spec>(\n    options: Omit<MethodArgs, 'query'> | string,\n    data: Omit<InputOf<Spec>, ID>,\n    responseSpec: Spec,\n  ): Promise<TypeOf<Spec>> {\n    return axios\n      .post<InputOf<Spec>>(url(options), data)\n      .then(res => res.data)\n      .then(decode(responseSpec))\n  }\n\n  async function patch<Opt extends Props, Req extends Props>(\n    options: Omit<MethodArgs, 'query'> | string,\n    data: Partial<InputOf<ObjC<Opt, Req>>>,\n    responseSpec: ObjC<Opt, Req>,\n  ): Promise<TypeOf<ObjC<Opt, Req>>> {\n    return axios\n      .patch<InputOf<ObjC<Opt, Req>>>(url(options), data)\n      .then(res => res.data)\n      .then(decode(responseSpec))\n  }\n\n  async function put<Spec extends Mixed>(\n    options: Omit<MethodArgs, 'query'> | string,\n    data: InputOf<Spec>,\n    responseSpec: Spec,\n  ): Promise<TypeOf<Spec>> {\n    return axios\n      .put<InputOf<Spec>>(url(options), data)\n      .then(res => res.data)\n      .then(decode(responseSpec))\n  }\n\n  async function del(\n    options: Omit<MethodArgs, 'query'> | string,\n  ): Promise<void> {\n    return axios.delete(url(options))\n  }\n\n  return { get, del, put, post, patch, axios }\n}\n","import { stringify } from 'query-string'\nimport {\n  AnyObj,\n  cast,\n  getProps,\n  keyof,\n  number,\n  ObjC,\n  opt,\n  partial,\n  Props,\n  readonlyArray,\n  req,\n  string,\n  TypeOf,\n  union,\n} from 'technoidentity-utils'\n\n// tslint:disable typedef\n\nexport const Page = req({ current: number, limit: number })\nconst SliceStartEnd = req({ start: number, end: number })\nconst SliceStartLimit = req({ start: number, limit: number })\nexport const Slice = union([SliceStartEnd, SliceStartLimit])\n\n// const Operators = opt({\n//   gt: Int,\n//   lt: Int,\n//   gte: Int,\n//   lte: Int,\n//   ne: union([Int, string]),\n//   like: string,\n// })\n\nexport interface APIQuery<C> {\n  readonly select?: ReadonlyArray<keyof C>\n  readonly filter?: Partial<C>\n  readonly range?: TypeOf<typeof Page> | TypeOf<typeof Slice>\n  readonly asc?: ReadonlyArray<keyof C>\n  readonly desc?: ReadonlyArray<keyof C>\n  readonly fullText?: string\n  readonly like?: Partial<C>\n  readonly embed?: keyof C\n  // readonly operators?: TypeOf<typeof Operators>\n}\n\nfunction apiQuerySpec(codec: AnyObj) {\n  const props = getProps(codec)\n\n  return opt({\n    select: readonlyArray(keyof(props)),\n    filter: partial(props),\n    range: union([Page, Slice]),\n    asc: readonlyArray(keyof(props)),\n    desc: readonlyArray(keyof(props)),\n    fullText: string,\n    like: partial(props),\n    // operators: record(keys(codec), Operators),\n    embed: keyof(props),\n  })\n}\n\nfunction likeQuery(like?: object): object {\n  const obj = like || {}\n  return Object.keys(obj).reduce<any>((acc, k) => {\n    // tslint:disable-next-line: no-object-mutation\n    acc[`${k}_like`] = obj[k]\n    return acc\n  }, {})\n}\n\nexport function toJSONServerQuery<Opt extends Props, Req extends Props>(\n  codec: ObjC<Opt, Req>,\n  query: APIQuery<TypeOf<typeof codec>>,\n): string {\n  cast(apiQuerySpec(codec), query)\n\n  const range = Page.is(query.range)\n    ? { _page: query.range.current, _limit: query.range.limit }\n    : SliceStartEnd.is(query.range)\n    ? {\n        _start: query.range.start,\n        _end: query.range.end,\n      }\n    : SliceStartLimit.is(query.range)\n    ? { _start: query.range.start, _limit: query.range.limit }\n    : {}\n\n  const { asc, desc } = query\n  const _sort = (asc || []).concat(desc || [])\n\n  const _order = (asc || [])\n    .map(_ => 'asc')\n    .concat((desc || []).map(_ => 'desc'))\n\n  const { filter, fullText: q, embed } = query\n  return stringify(\n    {\n      ...likeQuery(query.like),\n      ...filter,\n      ...range,\n      _sort,\n      _order,\n      q,\n      embed,\n    },\n    { arrayFormat: 'comma' },\n  )\n}\n\nexport function toAPIQuery<Opt extends Props, Req extends Props>(\n  spec: ObjC<Opt, Req>,\n  query: APIQuery<TypeOf<typeof spec>>,\n): string {\n  cast(apiQuerySpec(spec), query)\n\n  const { asc, desc } = query\n\n  const { filter, fullText: q, embed, select } = query\n\n  return stringify(\n    {\n      ...filter,\n      ...(query.range || {}),\n      select,\n      asc,\n      desc,\n      q,\n      embed,\n      ...likeQuery(query.like),\n    },\n    { arrayFormat: 'comma' },\n  )\n}\n","import { produce } from 'immer'\nimport {\n  ObjC,\n  objPick,\n  omit,\n  Props,\n  readonlyArray,\n  TypeOf,\n  UnknownArray,\n} from 'technoidentity-utils'\nimport { http as httpAPI, MethodArgs, RequestConfig } from './http'\nimport { APIQuery, toAPIQuery as toQueryFn } from './query'\n\ntype APIMethodArgs = Omit<MethodArgs, 'resource'>\nexport interface API<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n> {\n  readonly http: ReturnType<typeof httpAPI>\n  readonly spec: ObjC<Opt, Req>\n  readonly idKey: ID\n  readonly resource: string\n\n  many(options?: APIMethodArgs): Promise<ReadonlyArray<TypeOf<ObjC<Opt, Req>>>>\n\n  one(options?: APIMethodArgs): Promise<TypeOf<ObjC<Opt, Req>>>\n\n  create(\n    data: Omit<TypeOf<ObjC<Opt, Req>>, ID>,\n    options?: APIMethodArgs,\n  ): Promise<TypeOf<ObjC<Opt, Req>>>\n\n  get(\n    id: TypeOf<ObjC<Opt, Req>>[ID],\n    options?: APIMethodArgs,\n  ): Promise<TypeOf<ObjC<Opt, Req>>>\n\n  list(\n    query: APIQuery<TypeOf<ObjC<Opt, Req>>>,\n    options?: Omit<APIMethodArgs, 'query'>,\n  ): Promise<ReadonlyArray<TypeOf<ObjC<Opt, Req>>>>\n\n  select<K extends keyof TypeOf<ObjC<Opt, Req>>>(\n    query: Omit<APIQuery<TypeOf<ObjC<Opt, Req>>>, 'select'>,\n    select: readonly K[],\n    options?: Omit<APIMethodArgs, 'query'>,\n  ): Promise<\n    ReadonlyArray<\n      TypeOf<\n        ObjC<Pick<Opt, Extract<keyof Opt, K>>, Pick<Req, Extract<keyof Req, K>>>\n      >\n    >\n  >\n\n  replace(\n    id: TypeOf<ObjC<Opt, Req>>[ID],\n    data: TypeOf<ObjC<Opt, Req>>,\n    options?: APIMethodArgs,\n  ): Promise<TypeOf<ObjC<Opt, Req>>>\n\n  update(\n    id: TypeOf<ObjC<Opt, Req>>[ID],\n    data: Partial<TypeOf<ObjC<Opt, Req>>>,\n    options?: APIMethodArgs,\n  ): Promise<TypeOf<ObjC<Opt, Req>>>\n\n  del(id: TypeOf<ObjC<Opt, Req>>[ID], options?: APIMethodArgs): Promise<void>\n}\n\nfunction appendId(options: MethodArgs, id: string): MethodArgs {\n  return produce(options, draft => {\n    if (draft.path === undefined) {\n      draft.path = id\n    } else if (UnknownArray.is(draft.path)) {\n      draft.path.unshift(id)\n    } else {\n      draft.path = [id, draft.path]\n    }\n  })\n}\n\ninterface RestArgs extends RequestConfig {\n  readonly resource: string\n}\n\nexport function rest<\n  Opt extends Props,\n  Req extends Props,\n  ID extends keyof TypeOf<ObjC<Opt, Req>>\n>(\n  spec: ObjC<Opt, Req>,\n  idKey: ID,\n  { resource, ...options }: RestArgs,\n  toQuery: (\n    spec: ObjC<Opt, Req>,\n    query: APIQuery<TypeOf<ObjC<Opt, Req>>>,\n  ) => string = toQueryFn,\n): API<Opt, Req, ID> {\n  const http: ReturnType<typeof httpAPI> = httpAPI(options)\n\n  async function many(\n    options: APIMethodArgs,\n  ): Promise<ReadonlyArray<TypeOf<ObjC<Opt, Req>>>> {\n    return http.get({ ...options, resource }, readonlyArray(spec))\n  }\n\n  async function one(options: APIMethodArgs): Promise<TypeOf<ObjC<Opt, Req>>> {\n    return http.get({ ...options, resource }, spec)\n  }\n\n  async function create(\n    data: Omit<TypeOf<ObjC<Opt, Req>>, ID>,\n    options: APIMethodArgs,\n  ): Promise<TypeOf<ObjC<Opt, Req>>> {\n    // @TODO: Hopefully in future, either we won't omit, or use spec to omit.\n    return http.post({ ...options, resource }, omit(data, [idKey as any]), spec)\n  }\n\n  async function del(\n    id: TypeOf<ObjC<Opt, Req>>[ID],\n    options?: APIMethodArgs,\n  ): Promise<void> {\n    return http.del(appendId({ ...options, resource }, id))\n  }\n\n  async function get(\n    id: TypeOf<ObjC<Opt, Req>>[ID],\n    options: APIMethodArgs,\n  ): Promise<TypeOf<ObjC<Opt, Req>>> {\n    return one(appendId({ ...options, resource }, id))\n  }\n\n  async function list(\n    query: APIQuery<TypeOf<ObjC<Opt, Req>>>,\n    options?: Omit<APIMethodArgs, 'query'>,\n  ): Promise<ReadonlyArray<TypeOf<ObjC<Opt, Req>>>> {\n    return many({ query: toQuery(spec, query), ...options })\n  }\n\n  async function select<K extends keyof TypeOf<ObjC<Opt, Req>>>(\n    query: Omit<APIQuery<TypeOf<ObjC<Opt, Req>>>, 'select'>,\n    select: readonly K[],\n    options?: Omit<APIMethodArgs, 'query'>,\n    // @TODO: LOL at type\n  ): Promise<\n    ReadonlyArray<\n      TypeOf<\n        ObjC<Pick<Opt, Extract<keyof Opt, K>>, Pick<Req, Extract<keyof Req, K>>>\n      >\n    >\n  > {\n    return http.get(\n      { query: toQuery(spec, { ...query, select }), ...options, resource },\n      readonlyArray(objPick(spec, select)),\n    )\n  }\n\n  async function replace(\n    id: TypeOf<ObjC<Opt, Req>>[ID],\n    data: TypeOf<ObjC<Opt, Req>>,\n    options: APIMethodArgs,\n  ): Promise<TypeOf<ObjC<Opt, Req>>> {\n    return http.put(appendId({ ...options, resource }, id), data, spec)\n  }\n\n  async function update(\n    id: TypeOf<ObjC<Opt, Req>>[ID],\n    data: Partial<TypeOf<ObjC<Opt, Req>>>,\n    options: APIMethodArgs,\n  ): Promise<TypeOf<ObjC<Opt, Req>>> {\n    return http.patch(appendId({ ...options, resource }, id), data, spec)\n  }\n\n  return {\n    one,\n    many,\n    replace,\n    update,\n    create,\n    del,\n    get,\n    list,\n    idKey,\n    spec,\n    resource,\n    http,\n    select,\n  }\n}\n"],"names":["slashWarn","s","verify","string","is","debug","includes","buildResource","resource","undefined","trim","buildPath","path","array","paths","filter","p","forEach","length","join","buildQueryString","query","keys","stringify","buildUrl","options","url","http","del","axios","put","data","responseSpec","then","res","decode","patch","post","get","baseURL","config","ax","create","chop","Page","req","current","number","limit","SliceStartEnd","start","end","SliceStartLimit","Slice","union","apiQuerySpec","codec","props","getProps","opt","select","readonlyArray","keyof","partial","range","asc","desc","fullText","like","embed","likeQuery","obj","Object","reduce","acc","k","toJSONServerQuery","cast","_page","_limit","_start","_end","_sort","concat","_order","map","_","q","arrayFormat","toAPIQuery","spec","appendId","id","produce","draft","UnknownArray","unshift","rest","idKey","toQuery","update","replace","objPick","list","many","one","omit","toQueryFn","httpAPI"],"mappings":"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"}